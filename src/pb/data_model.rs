// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `include/data_model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct Tag {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tag {
    fn default() -> &'a Tag {
        <Tag as ::protobuf::Message>::default_instance()
    }
}

impl Tag {
    pub fn new() -> Tag {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string value = 2;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Tag {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tag {
        Tag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Tag| { &m.key },
                |m: &mut Tag| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Tag| { &m.value },
                |m: &mut Tag| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tag>(
                "Tag",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tag {
        static instance: ::protobuf::rt::LazyV2<Tag> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tag::new)
    }
}

impl ::protobuf::Clear for Tag {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gps {
    // message fields
    lat: ::std::option::Option<f32>,
    lon: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gps {
    fn default() -> &'a Gps {
        <Gps as ::protobuf::Message>::default_instance()
    }
}

impl Gps {
    pub fn new() -> Gps {
        ::std::default::Default::default()
    }

    // optional float lat = 1;


    pub fn get_lat(&self) -> f32 {
        self.lat.unwrap_or(0.)
    }
    pub fn clear_lat(&mut self) {
        self.lat = ::std::option::Option::None;
    }

    pub fn has_lat(&self) -> bool {
        self.lat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lat(&mut self, v: f32) {
        self.lat = ::std::option::Option::Some(v);
    }

    // optional float lon = 2;


    pub fn get_lon(&self) -> f32 {
        self.lon.unwrap_or(0.)
    }
    pub fn clear_lon(&mut self) {
        self.lon = ::std::option::Option::None;
    }

    pub fn has_lon(&self) -> bool {
        self.lon.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lon(&mut self, v: f32) {
        self.lon = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Gps {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lat = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lon = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.lat {
            my_size += 5;
        }
        if let Some(v) = self.lon {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.lat {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.lon {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gps {
        Gps::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lat",
                |m: &Gps| { &m.lat },
                |m: &mut Gps| { &mut m.lat },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lon",
                |m: &Gps| { &m.lon },
                |m: &mut Gps| { &mut m.lon },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Gps>(
                "Gps",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Gps {
        static instance: ::protobuf::rt::LazyV2<Gps> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gps::new)
    }
}

impl ::protobuf::Clear for Gps {
    fn clear(&mut self) {
        self.lat = ::std::option::Option::None;
        self.lon = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gps {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gps {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Date {
    // message fields
    day: ::std::option::Option<u32>,
    month: ::std::option::Option<u32>,
    year: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Date {
    fn default() -> &'a Date {
        <Date as ::protobuf::Message>::default_instance()
    }
}

impl Date {
    pub fn new() -> Date {
        ::std::default::Default::default()
    }

    // required uint32 day = 1;


    pub fn get_day(&self) -> u32 {
        self.day.unwrap_or(0)
    }
    pub fn clear_day(&mut self) {
        self.day = ::std::option::Option::None;
    }

    pub fn has_day(&self) -> bool {
        self.day.is_some()
    }

    // Param is passed by value, moved
    pub fn set_day(&mut self, v: u32) {
        self.day = ::std::option::Option::Some(v);
    }

    // required uint32 month = 2;


    pub fn get_month(&self) -> u32 {
        self.month.unwrap_or(0)
    }
    pub fn clear_month(&mut self) {
        self.month = ::std::option::Option::None;
    }

    pub fn has_month(&self) -> bool {
        self.month.is_some()
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: u32) {
        self.month = ::std::option::Option::Some(v);
    }

    // required uint32 year = 3;


    pub fn get_year(&self) -> u32 {
        self.year.unwrap_or(0)
    }
    pub fn clear_year(&mut self) {
        self.year = ::std::option::Option::None;
    }

    pub fn has_year(&self) -> bool {
        self.year.is_some()
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: u32) {
        self.year = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Date {
    fn is_initialized(&self) -> bool {
        if self.day.is_none() {
            return false;
        }
        if self.month.is_none() {
            return false;
        }
        if self.year.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.year = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.day {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.month {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.year {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.day {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.month {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.year {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Date {
        Date::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "day",
                |m: &Date| { &m.day },
                |m: &mut Date| { &mut m.day },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "month",
                |m: &Date| { &m.month },
                |m: &mut Date| { &mut m.month },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "year",
                |m: &Date| { &m.year },
                |m: &mut Date| { &mut m.year },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Date>(
                "Date",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Date {
        static instance: ::protobuf::rt::LazyV2<Date> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Date::new)
    }
}

impl ::protobuf::Clear for Date {
    fn clear(&mut self) {
        self.day = ::std::option::Option::None;
        self.month = ::std::option::Option::None;
        self.year = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Date {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Date {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Meta {
    // message fields
    ctime: ::std::option::Option<u64>,
    mtime: ::std::option::Option<u64>,
    finish_time: ::std::option::Option<u64>,
    pub gps: ::protobuf::SingularPtrField<Gps>,
    pub tags: ::protobuf::RepeatedField<Tag>,
    OLD_due: ::std::option::Option<u64>,
    pub due_date: ::protobuf::SingularPtrField<Date>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Meta {
    fn default() -> &'a Meta {
        <Meta as ::protobuf::Message>::default_instance()
    }
}

impl Meta {
    pub fn new() -> Meta {
        ::std::default::Default::default()
    }

    // required uint64 ctime = 1;


    pub fn get_ctime(&self) -> u64 {
        self.ctime.unwrap_or(0)
    }
    pub fn clear_ctime(&mut self) {
        self.ctime = ::std::option::Option::None;
    }

    pub fn has_ctime(&self) -> bool {
        self.ctime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctime(&mut self, v: u64) {
        self.ctime = ::std::option::Option::Some(v);
    }

    // required uint64 mtime = 2;


    pub fn get_mtime(&self) -> u64 {
        self.mtime.unwrap_or(0)
    }
    pub fn clear_mtime(&mut self) {
        self.mtime = ::std::option::Option::None;
    }

    pub fn has_mtime(&self) -> bool {
        self.mtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mtime(&mut self, v: u64) {
        self.mtime = ::std::option::Option::Some(v);
    }

    // optional uint64 finish_time = 5;


    pub fn get_finish_time(&self) -> u64 {
        self.finish_time.unwrap_or(0)
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time = ::std::option::Option::None;
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: u64) {
        self.finish_time = ::std::option::Option::Some(v);
    }

    // required .void.Gps gps = 3;


    pub fn get_gps(&self) -> &Gps {
        self.gps.as_ref().unwrap_or_else(|| <Gps as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gps(&mut self) {
        self.gps.clear();
    }

    pub fn has_gps(&self) -> bool {
        self.gps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gps(&mut self, v: Gps) {
        self.gps = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gps(&mut self) -> &mut Gps {
        if self.gps.is_none() {
            self.gps.set_default();
        }
        self.gps.as_mut().unwrap()
    }

    // Take field
    pub fn take_gps(&mut self) -> Gps {
        self.gps.take().unwrap_or_else(|| Gps::new())
    }

    // repeated .void.Tag tags = 4;


    pub fn get_tags(&self) -> &[Tag] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<Tag>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<Tag> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<Tag> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // optional uint64 OLD_due = 6;


    pub fn get_OLD_due(&self) -> u64 {
        self.OLD_due.unwrap_or(0)
    }
    pub fn clear_OLD_due(&mut self) {
        self.OLD_due = ::std::option::Option::None;
    }

    pub fn has_OLD_due(&self) -> bool {
        self.OLD_due.is_some()
    }

    // Param is passed by value, moved
    pub fn set_OLD_due(&mut self, v: u64) {
        self.OLD_due = ::std::option::Option::Some(v);
    }

    // optional .void.Date due_date = 7;


    pub fn get_due_date(&self) -> &Date {
        self.due_date.as_ref().unwrap_or_else(|| <Date as ::protobuf::Message>::default_instance())
    }
    pub fn clear_due_date(&mut self) {
        self.due_date.clear();
    }

    pub fn has_due_date(&self) -> bool {
        self.due_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: Date) {
        self.due_date = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_due_date(&mut self) -> &mut Date {
        if self.due_date.is_none() {
            self.due_date.set_default();
        }
        self.due_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_due_date(&mut self) -> Date {
        self.due_date.take().unwrap_or_else(|| Date::new())
    }
}

impl ::protobuf::Message for Meta {
    fn is_initialized(&self) -> bool {
        if self.ctime.is_none() {
            return false;
        }
        if self.mtime.is_none() {
            return false;
        }
        if self.gps.is_none() {
            return false;
        }
        for v in &self.gps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tags {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.due_date {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ctime = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.mtime = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.finish_time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gps)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tags)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.OLD_due = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.due_date)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.ctime {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.mtime {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.finish_time {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.gps.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.OLD_due {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.due_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.ctime {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.mtime {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.finish_time {
            os.write_uint64(5, v)?;
        }
        if let Some(ref v) = self.gps.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tags {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.OLD_due {
            os.write_uint64(6, v)?;
        }
        if let Some(ref v) = self.due_date.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Meta {
        Meta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ctime",
                |m: &Meta| { &m.ctime },
                |m: &mut Meta| { &mut m.ctime },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "mtime",
                |m: &Meta| { &m.mtime },
                |m: &mut Meta| { &mut m.mtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "finish_time",
                |m: &Meta| { &m.finish_time },
                |m: &mut Meta| { &mut m.finish_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gps>>(
                "gps",
                |m: &Meta| { &m.gps },
                |m: &mut Meta| { &mut m.gps },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tag>>(
                "tags",
                |m: &Meta| { &m.tags },
                |m: &mut Meta| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "OLD_due",
                |m: &Meta| { &m.OLD_due },
                |m: &mut Meta| { &mut m.OLD_due },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Date>>(
                "due_date",
                |m: &Meta| { &m.due_date },
                |m: &mut Meta| { &mut m.due_date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Meta>(
                "Meta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Meta {
        static instance: ::protobuf::rt::LazyV2<Meta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Meta::new)
    }
}

impl ::protobuf::Clear for Meta {
    fn clear(&mut self) {
        self.ctime = ::std::option::Option::None;
        self.mtime = ::std::option::Option::None;
        self.finish_time = ::std::option::Option::None;
        self.gps.clear();
        self.tags.clear();
        self.OLD_due = ::std::option::Option::None;
        self.due_date.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Meta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Meta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    id: ::std::option::Option<u64>,
    pub meta: ::protobuf::SingularPtrField<Meta>,
    text: ::protobuf::SingularField<::std::string::String>,
    pub children: ::std::vec::Vec<u64>,
    collapsed: ::std::option::Option<bool>,
    stricken: ::std::option::Option<bool>,
    hide_stricken: ::std::option::Option<bool>,
    x: ::std::option::Option<u32>,
    y: ::std::option::Option<u32>,
    selected: ::std::option::Option<bool>,
    parent_id: ::std::option::Option<u64>,
    free_text: ::protobuf::SingularField<::std::string::String>,
    auto_arrange: ::std::option::Option<bool>,
    url: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // required uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id.unwrap_or(0)
    }
    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    // required .void.Meta meta = 2;


    pub fn get_meta(&self) -> &Meta {
        self.meta.as_ref().unwrap_or_else(|| <Meta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: Meta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut Meta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> Meta {
        self.meta.take().unwrap_or_else(|| Meta::new())
    }

    // required string text = 3;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint64 children = 4;


    pub fn get_children(&self) -> &[u64] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::std::vec::Vec<u64>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.children, ::std::vec::Vec::new())
    }

    // required bool collapsed = 5;


    pub fn get_collapsed(&self) -> bool {
        self.collapsed.unwrap_or(false)
    }
    pub fn clear_collapsed(&mut self) {
        self.collapsed = ::std::option::Option::None;
    }

    pub fn has_collapsed(&self) -> bool {
        self.collapsed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_collapsed(&mut self, v: bool) {
        self.collapsed = ::std::option::Option::Some(v);
    }

    // required bool stricken = 6;


    pub fn get_stricken(&self) -> bool {
        self.stricken.unwrap_or(false)
    }
    pub fn clear_stricken(&mut self) {
        self.stricken = ::std::option::Option::None;
    }

    pub fn has_stricken(&self) -> bool {
        self.stricken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stricken(&mut self, v: bool) {
        self.stricken = ::std::option::Option::Some(v);
    }

    // required bool hide_stricken = 7;


    pub fn get_hide_stricken(&self) -> bool {
        self.hide_stricken.unwrap_or(false)
    }
    pub fn clear_hide_stricken(&mut self) {
        self.hide_stricken = ::std::option::Option::None;
    }

    pub fn has_hide_stricken(&self) -> bool {
        self.hide_stricken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_stricken(&mut self, v: bool) {
        self.hide_stricken = ::std::option::Option::Some(v);
    }

    // required uint32 x = 8;


    pub fn get_x(&self) -> u32 {
        self.x.unwrap_or(0)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: u32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required uint32 y = 9;


    pub fn get_y(&self) -> u32 {
        self.y.unwrap_or(0)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: u32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional bool selected = 10;


    pub fn get_selected(&self) -> bool {
        self.selected.unwrap_or(false)
    }
    pub fn clear_selected(&mut self) {
        self.selected = ::std::option::Option::None;
    }

    pub fn has_selected(&self) -> bool {
        self.selected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selected(&mut self, v: bool) {
        self.selected = ::std::option::Option::Some(v);
    }

    // required uint64 parent_id = 11;


    pub fn get_parent_id(&self) -> u64 {
        self.parent_id.unwrap_or(0)
    }
    pub fn clear_parent_id(&mut self) {
        self.parent_id = ::std::option::Option::None;
    }

    pub fn has_parent_id(&self) -> bool {
        self.parent_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_id(&mut self, v: u64) {
        self.parent_id = ::std::option::Option::Some(v);
    }

    // optional string free_text = 12;


    pub fn get_free_text(&self) -> &str {
        match self.free_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_free_text(&mut self) {
        self.free_text.clear();
    }

    pub fn has_free_text(&self) -> bool {
        self.free_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_free_text(&mut self, v: ::std::string::String) {
        self.free_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_free_text(&mut self) -> &mut ::std::string::String {
        if self.free_text.is_none() {
            self.free_text.set_default();
        }
        self.free_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_free_text(&mut self) -> ::std::string::String {
        self.free_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bool auto_arrange = 13;


    pub fn get_auto_arrange(&self) -> bool {
        self.auto_arrange.unwrap_or(false)
    }
    pub fn clear_auto_arrange(&mut self) {
        self.auto_arrange = ::std::option::Option::None;
    }

    pub fn has_auto_arrange(&self) -> bool {
        self.auto_arrange.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auto_arrange(&mut self, v: bool) {
        self.auto_arrange = ::std::option::Option::Some(v);
    }

    // optional string url = 14;


    pub fn get_url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.meta.is_none() {
            return false;
        }
        if self.text.is_none() {
            return false;
        }
        if self.collapsed.is_none() {
            return false;
        }
        if self.stricken.is_none() {
            return false;
        }
        if self.hide_stricken.is_none() {
            return false;
        }
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        if self.parent_id.is_none() {
            return false;
        }
        if self.auto_arrange.is_none() {
            return false;
        }
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.children)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.collapsed = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stricken = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hide_stricken = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.selected = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.parent_id = ::std::option::Option::Some(tmp);
                },
                12 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.free_text)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_arrange = ::std::option::Option::Some(tmp);
                },
                14 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.children {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.collapsed {
            my_size += 2;
        }
        if let Some(v) = self.stricken {
            my_size += 2;
        }
        if let Some(v) = self.hide_stricken {
            my_size += 2;
        }
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.selected {
            my_size += 2;
        }
        if let Some(v) = self.parent_id {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.free_text.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.auto_arrange {
            my_size += 2;
        }
        if let Some(ref v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(3, &v)?;
        }
        for v in &self.children {
            os.write_uint64(4, *v)?;
        };
        if let Some(v) = self.collapsed {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.stricken {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.hide_stricken {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.x {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.y {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.selected {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.parent_id {
            os.write_uint64(11, v)?;
        }
        if let Some(ref v) = self.free_text.as_ref() {
            os.write_string(12, &v)?;
        }
        if let Some(v) = self.auto_arrange {
            os.write_bool(13, v)?;
        }
        if let Some(ref v) = self.url.as_ref() {
            os.write_string(14, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Node| { &m.id },
                |m: &mut Node| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Meta>>(
                "meta",
                |m: &Node| { &m.meta },
                |m: &mut Node| { &mut m.meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &Node| { &m.text },
                |m: &mut Node| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "children",
                |m: &Node| { &m.children },
                |m: &mut Node| { &mut m.children },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "collapsed",
                |m: &Node| { &m.collapsed },
                |m: &mut Node| { &mut m.collapsed },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "stricken",
                |m: &Node| { &m.stricken },
                |m: &mut Node| { &mut m.stricken },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hide_stricken",
                |m: &Node| { &m.hide_stricken },
                |m: &mut Node| { &mut m.hide_stricken },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "x",
                |m: &Node| { &m.x },
                |m: &mut Node| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "y",
                |m: &Node| { &m.y },
                |m: &mut Node| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "selected",
                |m: &Node| { &m.selected },
                |m: &mut Node| { &mut m.selected },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "parent_id",
                |m: &Node| { &m.parent_id },
                |m: &mut Node| { &mut m.parent_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "free_text",
                |m: &Node| { &m.free_text },
                |m: &mut Node| { &mut m.free_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_arrange",
                |m: &Node| { &m.auto_arrange },
                |m: &mut Node| { &mut m.auto_arrange },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &Node| { &m.url },
                |m: &mut Node| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node>(
                "Node",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node {
        static instance: ::protobuf::rt::LazyV2<Node> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node::new)
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.meta.clear();
        self.text.clear();
        self.children.clear();
        self.collapsed = ::std::option::Option::None;
        self.stricken = ::std::option::Option::None;
        self.hide_stricken = ::std::option::Option::None;
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.selected = ::std::option::Option::None;
        self.parent_id = ::std::option::Option::None;
        self.free_text.clear();
        self.auto_arrange = ::std::option::Option::None;
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Arrow {
    // message fields
    from_node: ::std::option::Option<u64>,
    to_node: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Arrow {
    fn default() -> &'a Arrow {
        <Arrow as ::protobuf::Message>::default_instance()
    }
}

impl Arrow {
    pub fn new() -> Arrow {
        ::std::default::Default::default()
    }

    // required uint64 from_node = 1;


    pub fn get_from_node(&self) -> u64 {
        self.from_node.unwrap_or(0)
    }
    pub fn clear_from_node(&mut self) {
        self.from_node = ::std::option::Option::None;
    }

    pub fn has_from_node(&self) -> bool {
        self.from_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_node(&mut self, v: u64) {
        self.from_node = ::std::option::Option::Some(v);
    }

    // required uint64 to_node = 2;


    pub fn get_to_node(&self) -> u64 {
        self.to_node.unwrap_or(0)
    }
    pub fn clear_to_node(&mut self) {
        self.to_node = ::std::option::Option::None;
    }

    pub fn has_to_node(&self) -> bool {
        self.to_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_node(&mut self, v: u64) {
        self.to_node = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Arrow {
    fn is_initialized(&self) -> bool {
        if self.from_node.is_none() {
            return false;
        }
        if self.to_node.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.from_node = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.to_node = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_node {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_node {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_node {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.to_node {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Arrow {
        Arrow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "from_node",
                |m: &Arrow| { &m.from_node },
                |m: &mut Arrow| { &mut m.from_node },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "to_node",
                |m: &Arrow| { &m.to_node },
                |m: &mut Arrow| { &mut m.to_node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Arrow>(
                "Arrow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Arrow {
        static instance: ::protobuf::rt::LazyV2<Arrow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Arrow::new)
    }
}

impl ::protobuf::Clear for Arrow {
    fn clear(&mut self) {
        self.from_node = ::std::option::Option::None;
        self.to_node = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Arrow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Arrow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Screen {
    // message fields
    pub nodes: ::protobuf::RepeatedField<Node>,
    max_id: ::std::option::Option<u64>,
    pub arrows: ::protobuf::RepeatedField<Arrow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Screen {
    fn default() -> &'a Screen {
        <Screen as ::protobuf::Message>::default_instance()
    }
}

impl Screen {
    pub fn new() -> Screen {
        ::std::default::Default::default()
    }

    // repeated .void.Node nodes = 1;


    pub fn get_nodes(&self) -> &[Node] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    // required uint64 max_id = 2;


    pub fn get_max_id(&self) -> u64 {
        self.max_id.unwrap_or(0)
    }
    pub fn clear_max_id(&mut self) {
        self.max_id = ::std::option::Option::None;
    }

    pub fn has_max_id(&self) -> bool {
        self.max_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_id(&mut self, v: u64) {
        self.max_id = ::std::option::Option::Some(v);
    }

    // repeated .void.Arrow arrows = 3;


    pub fn get_arrows(&self) -> &[Arrow] {
        &self.arrows
    }
    pub fn clear_arrows(&mut self) {
        self.arrows.clear();
    }

    // Param is passed by value, moved
    pub fn set_arrows(&mut self, v: ::protobuf::RepeatedField<Arrow>) {
        self.arrows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arrows(&mut self) -> &mut ::protobuf::RepeatedField<Arrow> {
        &mut self.arrows
    }

    // Take field
    pub fn take_arrows(&mut self) -> ::protobuf::RepeatedField<Arrow> {
        ::std::mem::replace(&mut self.arrows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Screen {
    fn is_initialized(&self) -> bool {
        if self.max_id.is_none() {
            return false;
        }
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.arrows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.arrows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.max_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.arrows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.max_id {
            os.write_uint64(2, v)?;
        }
        for v in &self.arrows {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Screen {
        Screen::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                "nodes",
                |m: &Screen| { &m.nodes },
                |m: &mut Screen| { &mut m.nodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_id",
                |m: &Screen| { &m.max_id },
                |m: &mut Screen| { &mut m.max_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Arrow>>(
                "arrows",
                |m: &Screen| { &m.arrows },
                |m: &mut Screen| { &mut m.arrows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Screen>(
                "Screen",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Screen {
        static instance: ::protobuf::rt::LazyV2<Screen> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Screen::new)
    }
}

impl ::protobuf::Clear for Screen {
    fn clear(&mut self) {
        self.nodes.clear();
        self.max_id = ::std::option::Option::None;
        self.arrows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Screen {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Screen {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18include/data_model.proto\x12\x04void\"-\n\x03Tag\x12\x10\n\x03key\
    \x18\x01\x20\x02(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x02(\tR\x05va\
    lue\")\n\x03Gps\x12\x10\n\x03lat\x18\x01\x20\x01(\x02R\x03lat\x12\x10\n\
    \x03lon\x18\x02\x20\x01(\x02R\x03lon\"B\n\x04Date\x12\x10\n\x03day\x18\
    \x01\x20\x02(\rR\x03day\x12\x14\n\x05month\x18\x02\x20\x02(\rR\x05month\
    \x12\x12\n\x04year\x18\x03\x20\x02(\rR\x04year\"\xcf\x01\n\x04Meta\x12\
    \x14\n\x05ctime\x18\x01\x20\x02(\x04R\x05ctime\x12\x14\n\x05mtime\x18\
    \x02\x20\x02(\x04R\x05mtime\x12\x1f\n\x0bfinish_time\x18\x05\x20\x01(\
    \x04R\nfinishTime\x12\x1b\n\x03gps\x18\x03\x20\x02(\x0b2\t.void.GpsR\x03\
    gps\x12\x1d\n\x04tags\x18\x04\x20\x03(\x0b2\t.void.TagR\x04tags\x12\x17\
    \n\x07OLD_due\x18\x06\x20\x01(\x04R\x06OLDDue\x12%\n\x08due_date\x18\x07\
    \x20\x01(\x0b2\n.void.DateR\x07dueDate\"\xec\x02\n\x04Node\x12\x0e\n\x02\
    id\x18\x01\x20\x02(\x04R\x02id\x12\x1e\n\x04meta\x18\x02\x20\x02(\x0b2\n\
    .void.MetaR\x04meta\x12\x12\n\x04text\x18\x03\x20\x02(\tR\x04text\x12\
    \x1a\n\x08children\x18\x04\x20\x03(\x04R\x08children\x12\x1c\n\tcollapse\
    d\x18\x05\x20\x02(\x08R\tcollapsed\x12\x1a\n\x08stricken\x18\x06\x20\x02\
    (\x08R\x08stricken\x12#\n\rhide_stricken\x18\x07\x20\x02(\x08R\x0chideSt\
    ricken\x12\x0c\n\x01x\x18\x08\x20\x02(\rR\x01x\x12\x0c\n\x01y\x18\t\x20\
    \x02(\rR\x01y\x12\x1a\n\x08selected\x18\n\x20\x01(\x08R\x08selected\x12\
    \x1b\n\tparent_id\x18\x0b\x20\x02(\x04R\x08parentId\x12\x1b\n\tfree_text\
    \x18\x0c\x20\x01(\tR\x08freeText\x12!\n\x0cauto_arrange\x18\r\x20\x02(\
    \x08R\x0bautoArrange\x12\x10\n\x03url\x18\x0e\x20\x01(\tR\x03url\"=\n\
    \x05Arrow\x12\x1b\n\tfrom_node\x18\x01\x20\x02(\x04R\x08fromNode\x12\x17\
    \n\x07to_node\x18\x02\x20\x02(\x04R\x06toNode\"f\n\x06Screen\x12\x20\n\
    \x05nodes\x18\x01\x20\x03(\x0b2\n.void.NodeR\x05nodes\x12\x15\n\x06max_i\
    d\x18\x02\x20\x02(\x04R\x05maxId\x12#\n\x06arrows\x18\x03\x20\x03(\x0b2\
    \x0b.void.ArrowR\x06arrowsJ\xa9\x13\n\x06\x12\x04\0\08\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\r\n\n\n\x02\x04\0\x12\
    \x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0b\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\
    \x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x05\x12\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\
    \x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x1c\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\x06\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x12\x17\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x06\x1a\x1b\n\n\n\x02\x04\x01\x12\x04\t\0\x0c\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x0b\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\n\x02\x19\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\n\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\n\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\n\x11\x14\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\x17\x18\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x0b\x02\x19\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x0b\
    \x10\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x11\x14\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0b\x17\x18\n\n\n\x02\x04\x02\x12\x04\x0e\0\x12\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x0e\x08\x0c\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x0f\x04\x1c\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0f\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03\x0f\x14\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f\x1a\
    \x1b\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x10\x04\x1e\n\x0c\n\x05\x04\x02\
    \x02\x01\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x10\r\x13\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x10\x14\x19\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x10\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x11\x04\x1d\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x11\x04\x0c\
    \n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x11\r\x13\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03\x11\x14\x18\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\
    \x11\x1b\x1c\n\n\n\x02\x04\x03\x12\x04\x14\0\x1c\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x14\x08\x0c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x15\x02\x1c\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x15\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x15\x12\
    \x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x15\x1a\x1b\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03\x16\x02\x1c\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\
    \x16\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x16\x0b\x11\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03\x16\x12\x17\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03\x16\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x17\x02\"\n\
    \x0c\n\x05\x04\x03\x02\x02\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x03\x02\
    \x02\x05\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x17\
    \x12\x1d\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x17\x20!\n\x0b\n\x04\
    \x04\x03\x02\x03\x12\x03\x18\x02\x17\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\
    \x03\x18\x02\n\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03\x18\x0b\x0e\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03\x18\x0f\x12\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03\x18\x15\x16\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x19\x02\
    \x18\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\
    \x03\x02\x04\x06\x12\x03\x19\x0b\x0e\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\
    \x03\x19\x0f\x13\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x19\x16\x17\n\
    \x0b\n\x04\x04\x03\x02\x05\x12\x03\x1a\x02\x1e\n\x0c\n\x05\x04\x03\x02\
    \x05\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\x1a\
    \x0b\x11\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03\x1a\x12\x19\n\x0c\n\x05\
    \x04\x03\x02\x05\x03\x12\x03\x1a\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x06\x12\
    \x03\x1b\x02\x1d\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03\x1b\x02\n\n\x0c\
    \n\x05\x04\x03\x02\x06\x06\x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x03\x02\
    \x06\x01\x12\x03\x1b\x10\x18\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03\x1b\
    \x1b\x1c\n\n\n\x02\x04\x04\x12\x04\x1e\0-\x01\n\n\n\x03\x04\x04\x01\x12\
    \x03\x1e\x08\x0c\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1f\x02\x19\n\x0c\n\
    \x05\x04\x04\x02\0\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03\x1f\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1f\x12\x14\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1f\x17\x18\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03\x20\x02\x19\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03\x20\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03\x20\x0b\x0f\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03\x20\x10\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03\x20\x17\x18\n\x0b\n\x04\x04\x04\x02\x02\x12\x03!\x02\x1b\n\x0c\n\
    \x05\x04\x04\x02\x02\x04\x12\x03!\x02\n\n\x0c\n\x05\x04\x04\x02\x02\x05\
    \x12\x03!\x0b\x11\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03!\x12\x16\n\x0c\
    \n\x05\x04\x04\x02\x02\x03\x12\x03!\x19\x1a\n\x0b\n\x04\x04\x04\x02\x03\
    \x12\x03\"\x02\x1f\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03\"\x02\n\n\x0c\
    \n\x05\x04\x04\x02\x03\x05\x12\x03\"\x0b\x11\n\x0c\n\x05\x04\x04\x02\x03\
    \x01\x12\x03\"\x12\x1a\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03\"\x1d\x1e\
    \n\x0b\n\x04\x04\x04\x02\x04\x12\x03#\x02\x1e\n\x0c\n\x05\x04\x04\x02\
    \x04\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03#\x0b\x0f\
    \n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03#\x10\x19\n\x0c\n\x05\x04\x04\
    \x02\x04\x03\x12\x03#\x1c\x1d\n\x0b\n\x04\x04\x04\x02\x05\x12\x03$\x02\
    \x1d\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x04\
    \x02\x05\x05\x12\x03$\x0b\x0f\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03$\
    \x10\x18\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03$\x1b\x1c\n\x0b\n\x04\
    \x04\x04\x02\x06\x12\x03%\x02\"\n\x0c\n\x05\x04\x04\x02\x06\x04\x12\x03%\
    \x02\n\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03%\x0b\x0f\n\x0c\n\x05\x04\
    \x04\x02\x06\x01\x12\x03%\x10\x1d\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\
    \x03%\x20!\n\x0b\n\x04\x04\x04\x02\x07\x12\x03&\x02\x18\n\x0c\n\x05\x04\
    \x04\x02\x07\x04\x12\x03&\x02\n\n\x0c\n\x05\x04\x04\x02\x07\x05\x12\x03&\
    \x0b\x11\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x03&\x12\x13\n\x0c\n\x05\
    \x04\x04\x02\x07\x03\x12\x03&\x16\x17\n\x0b\n\x04\x04\x04\x02\x08\x12\
    \x03'\x02\x18\n\x0c\n\x05\x04\x04\x02\x08\x04\x12\x03'\x02\n\n\x0c\n\x05\
    \x04\x04\x02\x08\x05\x12\x03'\x0b\x11\n\x0c\n\x05\x04\x04\x02\x08\x01\
    \x12\x03'\x12\x13\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03'\x16\x17\n\x0b\
    \n\x04\x04\x04\x02\t\x12\x03(\x02\x1e\n\x0c\n\x05\x04\x04\x02\t\x04\x12\
    \x03(\x02\n\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03(\x0b\x0f\n\x0c\n\x05\
    \x04\x04\x02\t\x01\x12\x03(\x10\x18\n\x0c\n\x05\x04\x04\x02\t\x03\x12\
    \x03(\x1b\x1d\n\x0b\n\x04\x04\x04\x02\n\x12\x03)\x02!\n\x0c\n\x05\x04\
    \x04\x02\n\x04\x12\x03)\x02\n\n\x0c\n\x05\x04\x04\x02\n\x05\x12\x03)\x0b\
    \x11\n\x0c\n\x05\x04\x04\x02\n\x01\x12\x03)\x12\x1b\n\x0c\n\x05\x04\x04\
    \x02\n\x03\x12\x03)\x1e\x20\n\x0b\n\x04\x04\x04\x02\x0b\x12\x03*\x02!\n\
    \x0c\n\x05\x04\x04\x02\x0b\x04\x12\x03*\x02\n\n\x0c\n\x05\x04\x04\x02\
    \x0b\x05\x12\x03*\x0b\x11\n\x0c\n\x05\x04\x04\x02\x0b\x01\x12\x03*\x12\
    \x1b\n\x0c\n\x05\x04\x04\x02\x0b\x03\x12\x03*\x1e\x20\n\x0b\n\x04\x04\
    \x04\x02\x0c\x12\x03+\x02\"\n\x0c\n\x05\x04\x04\x02\x0c\x04\x12\x03+\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x0c\x05\x12\x03+\x0b\x0f\n\x0c\n\x05\x04\x04\
    \x02\x0c\x01\x12\x03+\x10\x1c\n\x0c\n\x05\x04\x04\x02\x0c\x03\x12\x03+\
    \x1f!\n\x0b\n\x04\x04\x04\x02\r\x12\x03,\x02\x1b\n\x0c\n\x05\x04\x04\x02\
    \r\x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x04\x02\r\x05\x12\x03,\x0b\x11\n\
    \x0c\n\x05\x04\x04\x02\r\x01\x12\x03,\x12\x15\n\x0c\n\x05\x04\x04\x02\r\
    \x03\x12\x03,\x18\x1a\n\n\n\x02\x04\x05\x12\x04/\02\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03/\x08\r\n\x0b\n\x04\x04\x05\x02\0\x12\x030\x02\x20\n\x0c\
    \n\x05\x04\x05\x02\0\x04\x12\x030\x02\n\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x030\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x030\x12\x1b\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x030\x1e\x1f\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x031\x02\x1e\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x031\x02\n\n\x0c\n\x05\
    \x04\x05\x02\x01\x05\x12\x031\x0b\x11\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x031\x12\x19\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x031\x1c\x1d\n\n\n\
    \x02\x04\x06\x12\x044\08\x01\n\n\n\x03\x04\x06\x01\x12\x034\x08\x0e\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x035\x02\x1a\n\x0c\n\x05\x04\x06\x02\0\x04\
    \x12\x035\x02\n\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x035\x0b\x0f\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x035\x10\x15\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x035\x18\x19\n\x0b\n\x04\x04\x06\x02\x01\x12\x036\x02\x1d\n\x0c\n\
    \x05\x04\x06\x02\x01\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x036\x0b\x11\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x036\x12\x18\n\x0c\
    \n\x05\x04\x06\x02\x01\x03\x12\x036\x1b\x1c\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x037\x02\x1c\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x037\x02\n\n\x0c\n\
    \x05\x04\x06\x02\x02\x06\x12\x037\x0b\x10\n\x0c\n\x05\x04\x06\x02\x02\
    \x01\x12\x037\x11\x17\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x037\x1a\x1b\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
